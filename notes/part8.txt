1234567890---------2---------3---------4---------5---------6---------7-2-------8---------9---------1
SVENs GITHUB: https://github.com/ofcan/game-of-life-ruby
MY PLAYLIST:  https://www.youtube.com/playlist?list=PLMC91Ry9EhRKUn0MIdgXrZiptF7nVyYoQ
MY GITHUB:    https://github.com/mixelpixel/GameOfLife
**A Ruby Tutorial: Implementing John H. Conway's "Game of Life"**
PART 8 - Planting the seeds
https://youtu.be/1R5thzz6rcw?list=PLMC91Ry9EhRKUn0MIdgXrZiptF7nVyYoQ



Start by writing the tests for the "seeding" of the game with cells.

CONCEPT: Upon initialization of a Game we create a "#<World" with a default "@cell_grid"
(which is a nested array based on default number of "@rows" and "@cols")
and which has "#<Cell"s in it, e.g.

patrick@ubuntu:~/Ruby/GameOfLife$ irb
2.3.0 :001 > load 'game_of_life.rb'
 => true 
2.3.0 :002 > g = World.new
 => #<World:0x000000016f34d8 @rows=3, @cols=3,
@cell_grid=[[#<Cell:0x000000016f3438 @alive=false, @x=0, @y=0>,
             #<Cell:0x000000016f3410 @alive=false, @x=1, @y=0>,
             #<Cell:0x000000016f33e8 @alive=false, @x=2, @y=0>],
            [#<Cell:0x000000016f3398 @alive=false, @x=0, @y=1>,
             #<Cell:0x000000016f3370 @alive=false, @x=1, @y=1>,
             #<Cell:0x000000016f3348 @alive=false, @x=2, @y=1>],
            [#<Cell:0x000000016f32f8 @alive=false, @x=0, @y=2>,
             #<Cell:0x000000016f32d0 @alive=false, @x=1, @y=2>,
             #<Cell:0x000000016f32a8 @alive=false, @x=2, @y=2>]]> 

All of those #<Cells are dead ("@alive" == false >> true) so we'll reference existing
cells within this world and turn them from dead to alive ("@alive" == true) and later we'll test if the
cells with these coordinates are alive or dead. For starters, the test:
# spec - context 'Game':
 69     it 'should plant seeds properly' do
 70       game = Game.new(world, [])        <--- creating a Game object to test proper seeding
 71     end

the "seeds" argument in game class will have something in it, but not:
# basic game - class Game:
  6  def initialize(world=World.new, seeds=[Cell.new, Cell.new...]

...because World class alread takes care of invoking Cell class. 

...the "seed" array need something in it to point to the coordinates of the indexes for the
nested Cell arrays that have been initialized with the World object:

 69     it 'should plant seeds properly' do
 70       game = Game.new(world, [[1, 2], [0, 2]])  <-- specifying coordinates within the cell_grid
 71     end

... at this point the spec test fails because the variable 'world' is undefined and we get an Error:

patrick@ubuntu:~/Ruby/GameOfLife$ rspec spec_game_of_life.rb
.........F.
Failures:
  1) Game of Life Game should plant seeds properly
     Failure/Error: game = Game.new(world, [[1, 2], [0, 2]])
     NameError:
       undefined local variable or method `world'


NOTE: At this point I just want to try and articulate something which is confusing me because
I often find that when I explicitly describe what I am having trouble understanding that the process
of putting the problem I am having into words helps me to find a solution and/or understand
what's going on and involved a lot better.

Now, maybe I'm a little dyslexic, but I do get turned around some by the rows/cols/x/y numbers
and how they correspond to index coordinates values.

It helped me wrap my head around the indexes to load the game.rb into irb and initialize
a World.new to a variable ("g") and display this:

2.3.0 :028 > g.cell_grid[0][0]
 => #<Cell:0x000000016f3438 @alive=false, @x=0, @y=0> 
2.3.0 :029 > g.cell_grid[0][1]
 => #<Cell:0x000000016f3410 @alive=false, @x=1, @y=0> 
2.3.0 :030 > g.cell_grid[0][2]
 => #<Cell:0x000000016f33e8 @alive=false, @x=2, @y=0>   <----- corresponds to [0, 2] 
2.3.0 :031 > g.cell_grid[1][0]
 => #<Cell:0x000000016f3398 @alive=false, @x=0, @y=1> 
2.3.0 :032 > g.cell_grid[1][1]
 => #<Cell:0x000000016f3370 @alive=false, @x=1, @y=1> 
2.3.0 :033 > g.cell_grid[1][2]
 => #<Cell:0x000000016f3348 @alive=false, @x=2, @y=1>   <----- corresponds to [1, 2]
2.3.0 :034 > g.cell_grid[2][0]
 => #<Cell:0x000000016f32f8 @alive=false, @x=0, @y=2> 
2.3.0 :035 > g.cell_grid[2][1]
 => #<Cell:0x000000016f32d0 @alive=false, @x=1, @y=2> 
2.3.0 :036 > g.cell_grid[2][2]
 => #<Cell:0x000000016f32a8 @alive=false, @x=2, @y=2>


...and let's take a look at a new Game:
patrick@ubuntu:~/Ruby/GameOfLife$ irb
2.3.0 :001 > load 'game_of_life.rb'
 => true 
2.3.0 :002 > g= Game.new(World.new, [[1, 2], [0, 2]])
 => #<Game:0x00000001bf4a90 @world=#<World:0x00000001bf4d88 @rows=3, @cols=3,
@cell_grid=[[#<Cell:0x00000001bf4d10 @alive=false, @x=0, @y=0>,
             #<Cell:0x00000001bf4ce8 @alive=false, @x=1, @y=0>,
             #<Cell:0x00000001bf4cc0 @alive=true, @x=2, @y=0>],
            [#<Cell:0x00000001bf4c48 @alive=false, @x=0, @y=1>,
             #<Cell:0x00000001bf4c20 @alive=false, @x=1, @y=1>,
             #<Cell:0x00000001bf4bf8 @alive=true, @x=2, @y=1>],
            [#<Cell:0x00000001bf4ba8 @alive=false, @x=0, @y=2>,
             #<Cell:0x00000001bf4b80 @alive=false, @x=1, @y=2>,
             #<Cell:0x00000001bf4b58 @alive=false, @x=2, @y=2>]]>,
@seeds=[[1, 2], [0, 2]]>

...and I think back to the basic game script:
# basic game - World class:
 25    # [[Cell.new, Cell.new, Cell.new], # [[[0][0], [0][1], [0][2]],
 26    #  [Cell.new, Cell.new, Cell.new]  #  [[1][0], [1][1], [1][2]],
 27    #  [Cell.new, Cell.new, Cell.new]] #  [[2][0], [2][1], [2][2]]]
 28     @cell_grid = Array.new(rows) do |row|
 29                    Array.new(cols) do |col|
 30                      Cell.new(col, row)
...
 38 class Cell
 39   attr_accessor :alive, :x, :y
 40 
 41   def initialize(x=0, y=0)



...it's starting to cohere, but I am thrown by the alphabetical order of ...x, y... compared to
the index coordinates [y, x] for Cell.new(col, row) when Cell is initialized(x, y).



Okay. Back to testing and building and addressing the NameError and "world" variable in the rspec file:
@~3m37s
... so let's define the variable 'world' in the rspec file. We can put it at the head of the file
and use the let! method to invoke it:
# rspec
  1 # spec file
  2 
  3 require 'rspec'
  4 require_relative 'game_of_life.rb'
  5 
  6 describe 'Game of Life' do
  7 
  8   context 'world' do
  9     subject { World.new }
 10 
 11     let!(:world) { World.new }  # <-- Now there is something assigned to the variable 'world'

So, if we run the test it passes and now we can see about seeding the Game object with alive cells.
# rspec - context 'Game'
 77     it 'should plant seeds properly' do
 78       game = Game.new(world, [[1, 2], [0, 2]])
 79       expect(world.cell_grid[1][2]).to be_alive
 80       expect(world.cell_grid[0][2]).to be_alive
 81     end

...running the rspec test results in the following error:
"Failure/Error: expect(world.cell_grid[1][2]).to be_alive
   expected #<Cell:0x000000030c4dd0 @alive=false, @x=2, @y=1> to respond to `alive?`"

...so it looks like we need to define an "alive?" method, eh?

First within the context of a Cell:
# rpsec - context 'Cell"
 45     it 'should respond to proper methods' do
 46       expect(subject).to respond_to(:alive)
 47       expect(subject).to respond_to(:x)
 48       expect(subject).to respond_to(:y)
 49       expect(subject).to respond_to(:alive?)    <--------
 50     end

And the test now has two failures, so we need to make the alive? method in the Cell class:
# basic game - class Cell
 38 class Cell
 39   attr_accessor :alive, :x, :y
 40 
 41   def initialize(x=0, y=0)
 42     @alive = false
 43     @x = x
 44     @y = y
 45   end
 46 
 47   def alive?         <-----------
 48   end

...rspec returns "nil" so we make alive? return "alive":
 38 class Cell
 39   attr_accessor :alive, :x, :y
 40
 41   def initialize(x=0, y=0)
 42     @alive = false
 43     @x = x
 44     @y = y
 45   end
 46
 47   def alive?         <-----------
 48     alive            <----------- returns @alive=false
 39   end

... rspec now returns 'false' so we make it return 'true' by modifying the Game class:
# basic game - class Game
  3 class Game
  4   attr_accessor :world, :seeds
  5 
  6   def initialize(world=World.new, seeds=[])
  7     @world     = world
  8     @seeds     = seeds
  9 
 10     seeds.each do |seed|                               <-------
 11       world.cell_grid[seed[0]][seed[1]].alive = true   <-------
 12     end                                                <-------
 13   end

So now that we know when we run rspec we are passing a two valued "seeds" argument
We are making the game initialization take those "seeds" coordinates and set their
@alive attribute to true.
game = Game.new(world, [[1, 2], [0, 2]])
seeds = [[1, 2], [0, 2]]

NOTE: here I am again unsure of how the indexes and values are handled by cell_grid.

But I think...
seeds.each do |seed|
  world.cell_grid[seed[0]][seed[1]].alive = true

reads: for each seeds element, the cell grid coordinate's alive value is set to true.


Not totally solid on all the index/coordinate/x,y action, but it's coming together.




