1234567890---------2---------3---------4---------5---------6---------7-2-------8---------9---------1
SVENs GITHUB: https://github.com/ofcan/game-of-life-ruby
MY PLAYLIST:  https://www.youtube.com/playlist?list=PLMC91Ry9EhRKUn0MIdgXrZiptF7nVyYoQ
MY GITHUB:    https://github.com/mixelpixel/GameOfLife
**A Ruby Tutorial: Implementing John H. Conway's "Game of Life"**
PART 17 - The Grand Finale
https://youtu.be/wIbL4klYtQk?list=PLMC91Ry9EhRKUn0MIdgXrZiptF7nVyYoQ



# gosu
 14     # Color
 15     @background_color = Gosu::Color.new(0xffdedede)
 16     @alive_color = Gosu::Color.new(0xff121212)
 17     @dead_color = Gosu::Color.new(0xffededed)
...
 43     @game.world.cells.each do |cell|
 44       if cell.alive?
 45         draw_quad(cell.x * @col_width, cell.y * @row_height, @alive_color,
 46                   (cell.x * @col_width) + @col_width, cell.y * @row_height, @alive_color,
 47                   (cell.x * @col_width) + @col_width, (cell.y * @row_height) + @row_height, @alive_color,
 48                   cell.x * @col_width, (cell.y * @row_height) + @row_height, @alive_color)
 49       else
 50         draw_quad(cell.x * @col_width, cell.y * @row_height, @dead_color,
 51                   (cell.x * @col_width) + @col_width, cell.y * @row_height, @dead_color,
 52                   (cell.x * @col_width) + @col_width, (cell.y * @row_height) + @row_height, @dead_color,
 53                   cell.x * @col_width, (cell.y * @row_height) + @row_height, @dead_color)
 54       end

...And to get it rolling:

 32   def update                                  # <-- updates game 60 times per second
 33                                               # <-- contains (or references) game logic
 34     @game.tick!
 35   end


NOW: WHY ARE GOSU HEIGHT/WIDTH INITS REVERSED FROM THE DEFAULT?????

