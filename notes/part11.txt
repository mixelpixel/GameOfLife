1234567890---------2---------3---------4---------5---------6---------7-2-------8---------9---------1
SVENs GITHUB: https://github.com/ofcan/game-of-life-ruby
MY PLAYLIST:  https://www.youtube.com/playlist?list=PLMC91Ry9EhRKUn0MIdgXrZiptF7nVyYoQ
MY GITHUB:    https://github.com/mixelpixel/GameOfLife
**A Ruby Tutorial: Implementing John H. Conway's "Game of Life"**
PART 11 - Counting the neighbours (finished)
https://youtu.be/jdNj3LCUxXw?list=PLMC91Ry9EhRKUn0MIdgXrZiptF7nVyYoQ



Oh my... I was a little off about the directionals. Heh.
I got the rspec tests right, but didn't complete the "live_neighbors..." method.
For starters, since I at least got the geometry correct, I'll add the let option
Sven uses:
# spec
  7 describe 'Game of Life' do
  8 
  9   let!(:world) { World.new }
 10   let!(:cell) { Cell.new(1, 1) }   # <-- Making a cell @ (1, 1) 

So now, instead of this:
# spec
 37     it 'should detect a neighbor to the NORTH' do
 38       expect(subject.cell_grid[0][1]).to be_dead
 39       puts
 40       puts subject.cell_grid[0][1].alive
 41       subject.cell_grid[0][1].alive = true
 42       puts
 43       puts subject.cell_grid[0][1].alive
 44       expect(subject.cell_grid[0][1]).to be_alive
 45       expect(subject.live_neighbors_around_cell(subject.cell_grid[1][1]).count) == 1
 46     end

(I added the puts statements just to see what was going on...)

I'll do this to have a look around:
# spec
 37     it 'should detect a neighbor to the NORTH' do
 38       expect(subject.cell_grid[cell.y - 1][cell.x]).to be_dead
 39       expect(subject.cell_grid[0][1]).to be_dead
 40       puts
 41       puts subject.cell_grid[0][1].x                      # <-- 1
 42       puts subject.cell_grid[0][1].y                      # <-- 0
 43       puts subject.cell_grid[cell.y - 1][cell.x].alive    # <-- false
 44       puts subject.cell_grid[0][1].alive                  # <-- false
 45       subject.cell_grid[cell.y - 1][cell.x].alive = true
 46       puts
 47       puts subject.cell_grid[0][1].alive                  # <-- true
 48       expect(subject.cell_grid[0][1]).to be_alive
 49       expect(subject.live_neighbors_around_cell(subject.cell_grid[1][1]).count) == 1
 50     end

... but after reviewing the video, I'll reduce it to this for now:
# spec
 37     it 'should detect a neighbor to the NORTH' do
 38       expect(subject.cell_grid[cell.y - 1][cell.x]).to be_dead     # <-- temporary
 39       subject.cell_grid[cell.y - 1][cell.x].alive = true
 40       expect(subject.cell_grid[cell.y - 1][cell.x]).to be_alive    # <-- temporary
 41       expect(subject.live_neighbors_around_cell(cell).count) == 1
 42     end

So this passes with only the North check of "live_neighbors_around_cell" written:
# game
 35   def live_neighbors_around_cell(cell)
 36     live_neighbors = []
 37 
 38     # it detects a neighbor to the North
 39     # NOTE: there are no neighbors to the North of the TOP row (cell.y < 0)
 40     if cell.y > 0
 41       candidate = self.cell_grid[cell.y - 1][cell.x]
 42       live_neighbors << candidate if candidate.alive
 43     end
 44 
 45     live_neighbors
 46   end

...but so do all the other rspec tests - why?

WHY????????

...moving on:
# spec
 37     it 'should detect a neighbor to the NORTH' do
 38       expect(subject.cell_grid[cell.y - 1][cell.x]).to be_dead     # <-- temporary
 39       subject.cell_grid[cell.y - 1][cell.x].alive = true
 40       expect(subject.cell_grid[cell.y - 1][cell.x]).to be_alive    # <-- temporary
 41       expect(subject.live_neighbors_around_cell(cell).count) == 1
 42     end
 43 
 44     it 'should detect a neighbor to the SOUTH' do
 45 #      expect(subject.cell_grid[2][1]).to be_dead
 46       expect(subject.cell_grid[cell.y + 1][cell.x]).to be_dead
 47 #      subject.cell_grid[2][1].alive = true
 48       subject.cell_grid[cell.y + 1][cell.x].alive = true
 49 #      expect(subject.cell_grid[2][1]).to be_alive
 50       expect(subject.cell_grid[cell.y + 1][cell.x]).to be_alive
 51 #      expect(subject.live_neighbors_around_cell(subject.cell_grid[1][1]).count) == 1
 52       expect(subject.live_neighbors_around_cell(cell).count) == 1
 53     end
 54 
 55     it 'should detect a neighbor to the WEST' do
 56       expect(subject.cell_grid[cell.y][cell.x - 1]).to be_dead
 57       subject.cell_grid[cell.y][cell.x - 1].alive = true
 58       expect(subject.cell_grid[cell.y][cell.x - 1]).to be_alive
 59       expect(subject.live_neighbors_around_cell(cell).count) == 1
 60     end
 61 
 62     it 'should detect a neighbor to the EAST' do
 63       expect(subject.cell_grid[cell.y][cell.x + 1]).to be_dead
 64       subject.cell_grid[cell.y][cell.x + 1].alive = true
 65       expect(subject.cell_grid[cell.y][cell.x + 1]).to be_alive
 66       expect(subject.live_neighbors_around_cell(cell).count) == 1
 67     end
 68 
 69     it 'should detect a neighbor to the NORTHWEST' do
 70       expect(subject.cell_grid[cell.y - 1][cell.x - 1]).to be_dead
 71       subject.cell_grid[cell.y - 1][cell.x - 1].alive = true
 72       expect(subject.cell_grid[cell.y - 1][cell.x - 1]).to be_alive
 73       expect(subject.live_neighbors_around_cell(cell).count) == 1
 74     end
 75 
 76     it 'should detect a neighbor to the NORTHEAST' do
 77       expect(subject.cell_grid[cell.y - 1][cell.x + 1]).to be_dead
 78       subject.cell_grid[cell.y - 1][cell.x + 1].alive = true
 79       expect(subject.cell_grid[cell.y - 1][cell.x + 1]).to be_alive
 80       expect(subject.live_neighbors_around_cell(cell).count) == 1
 81     end
 82 
 83     it 'should detect a neighbor to the SOUTHWEST' do
 84       expect(subject.cell_grid[cell.y + 1][cell.x - 1]).to be_dead
 85       subject.cell_grid[cell.y + 1][cell.x - 1].alive = true
 86       expect(subject.cell_grid[cell.y + 1][cell.x - 1]).to be_alive
 87       expect(subject.live_neighbors_around_cell(cell).count) == 1
 88     end
 89 
 90     it 'should detect a neighbor to the SOUTHEAST' do
 91       expect(subject.cell_grid[cell.y + 1][cell.x + 1]).to be_dead
 92       subject.cell_grid[cell.y + 1][cell.x + 1].alive = true
 93       expect(subject.cell_grid[cell.y + 1][cell.x + 1]).to be_alive
 94       expect(subject.live_neighbors_around_cell(cell).count) == 1
 95     end


# game
 35   def live_neighbors_around_cell(cell)
 36     live_neighbors = []
 37 
 38     # NORTH
 39     if cell.y > 0  # NOTE: there are no neighbors North of the TOP row (cell.y < 0) 
 40       candidate = self.cell_grid[cell.y - 1][cell.x]
 41       live_neighbors << candidate if candidate.alive
 42       # the candidate is added to the live_neighbors list
 43     end
 44 
 45     # SOUTH
 46     if cell.y < (rows - 1)
 47       candidate = self.cell_grid[cell.y + 1][cell.x]
 48       live_neighbors << candidate if candidate.alive
 49     end
 50 
 51     # WEST
 52     if cell.x > 0
 53       candidate = self.cell_grid[cell.y][cell.x - 1]
 54       live_neighbors << candidate if candidate.alive
 55     end
 56 
 57     # EAST
 58     if cell.x < (cols - 1)
 59       candidate = self.cell_grid[cell.y][cell.x + 1]
 60       live_neighbors << candidate if candidate.alive
 61     end
 62 
 63     # NORTHWEST
 64     if cell.y > 0 && cell.x > 0
 65       candidate = self.cell_grid[cell.y - 1][cell.x - 1]
 66       live_neighbors << candidate if candidate.alive
 67     end
 68 
 69     # NORTHEAST
 70     if cell.y < 0 && cell.x < (cols - 1)
 71       candidate = self.cell_grid[cell.y - 1][cell.x + 1]
 72       live_neighbors << candidate if candidate.alive
 73     end
 74 
 75     # SOUTHWEST
 76     if cell.y < (rows - 1) && cell.x > 0
 77       candidate = self.cell_grid[cell.y + 1][cell.x - 1]
 78       live_neighbors << candidate if candidate.alive
 79     end
 80 
 81     # SOUTHEAST
 82     if cell.y < (rows - 1)  && cell.x < (cols - 1)
 83       candidate = self.cell_grid[cell.y + 1][cell.x + 1]
 84       live_neighbors << candidate if candidate.alive
 85     end
 86 
 87     live_neighbors # live neighbors is returned
 88 
 89   end


To investigate later. . .


Onward...

Running rspec we get the failure for the Rule #1 test we started:
# rspec test msg:
Failures:

  1) Game of Life Rules Rule 1: Any live cell with fewer than two live neighbours dies, as if caused by under-population. should kill a cell with one live neighbor
     Failure/Error: game.tick!

     NoMethodError:
       undefined method `tick!' for #<Game:0x0000000259a518>
     # ./spec_game_of_life.rb:156:in `block (4 levels) in <top (required)>'


So, onward with coding the FOUR RULES, we begin by defining "tick!":
# game
  3 class Game
  4   attr_accessor :world, :seeds
  5 
  6   def initialize(world=World.new, seeds=[])
  7     @world     = world
  8     @seeds     = seeds
  9 
 10     seeds.each do |seed|
 11       world.cell_grid[seed[0]][seed[1]].alive = true
 12     end
 13   end
 14 
 15   def tick!                  # <-- basic method for rspec
 16   end
 17 
 18 end

... the rspec test fails with this msg:
# rspec test msg:
Failures:

  1) Game of Life Rules Rule 1: Any live cell with fewer than two live neighbours dies, as if caused by under-population. should kill a cell with one live neighbor
     Failure/Error: expect(world.cell_grid[1][0]).to be_dead
       expected `#<Cell:0x000000024351a0 @alive=true, @x=0, @y=1>.dead?` to return true, got false
     # ./spec_game_of_life.rb:157:in `block (4 levels) in <top (required)>'

NOTE: @2m31s ...so we need "tick!" to kill off cells per Rule #1
How do we do that?
1) We iterate over each cell within the Game.world
2) detect if that cell is alive
3) detect if that cell has fewer than two live neighbors
4) if so, kill that cell.

For starters:
# game
 15   def tick!
 16     world.cells.each do |cell|
 17       # Rule 1
 18       if cell.alive && world.live_neighbors_arouns_cell(cell).count < 2
 19         cell.die
 20       end
 21     end
 22   end

and we getthis NoMethodError msg running rspec:
# rspec error msg:
Failures:

  1) Game of Life Rules Rule 1: Any live cell with fewer than two live neighbours dies, as if caused by under-population. should kill a cell with one live neighbor
     Failure/Error: game.tick!

     NoMethodError:
       undefined method `cells' for #<World:0x0000000219e298>
     # ./game_of_life.rb:16:in `tick!'
     # ./spec_game_of_life.rb:156:in `block (4 levels) in <top (required)>'

...so we add the test for the method "cells" in the World object:
# spec
  7 describe 'Game of Life' do
  8 
  9   let!(:world) { World.new }
 10   let!(:cell) { Cell.new(1, 1) }
 11 
 12   context 'World' do
 13     subject { World.new }
 14 
 15     it 'should create a new world object' do
 16       expect(subject.is_a?(World)).to be_truthy # not sure which is best
 17     end
 18 
 19     it 'should respond to proper methods' do
 20       expect(subject).to respond_to(:rows)
 21       expect(subject).to respond_to(:cols)
 22       expect(subject).to respond_to(:cell_grid)
 23       expect(subject).to respond_to(:live_neighbors_around_cell)
 24       expect(subject).to respond_to(:cells)               # <-- THIS
 25     end

... and now the rspec test fails with this "NoMethodError" msg:
Failures:

  1) Game of Life World should respond to proper methods
     Failure/Error: expect(subject).to respond_to(:cells)
       expected #<World:0x000000012e4950 @rows=3, @cols=3, @cell_grid=[[#<Cell:0x000000012e48d8 @alive=false, @x=0, @...ell:0x000000012e4748 @alive=false, @x=1, @y=2>, #<Cell:0x000000012e4720 @alive=false, @x=2, @y=2>]]> to respond to :cells
     # ./spec_game_of_life.rb:24:in `block (3 levels) in <top (required)>'

... and we add "cells" to the World class:
# game
 26 class World
 27   attr_accessor :rows, :cols, :cell_grid, :cells  # <-- THIS
 28 
 29   def initialize(rows=3, cols=3)     # Why the (rows, cols) here then (col, row) ???
 30     @rows      = rows
 31     @cols      = cols
 32     @cells     = []                               # <-- THIS

...and we still fail the test:
# rspec error msg
Failures:

  1) Game of Life Rules Rule 1: Any live cell with fewer than two live neighbours dies, as if caused by under-population. should kill a cell with one live neighbor
     Failure/Error: expect(world.cell_grid[1][0]).to be_dead
       expected `#<Cell:0x00000001be2278 @alive=true, @x=0, @y=1>.dead?` to return true, got false
     # ./spec_game_of_life.rb:157:in `block (4 levels) in <top (required)>'

...and we need to write the means to kill the cell per Rule#1. We start by testing the 
cells in the new cells array we just created:
# rspec
 12   context 'World' do
 13     subject { World.new }
...
 38     it 'should add all cells to cells array' do
 39       puts subject.cells.count                  # <-- THIS HELPED
 40       expect(subject.cells.count == 9).to be_truthy # nine cuz default is 3x3
 41     end


HUGE ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ NOW I KNOW WHY THE DIRECTIONAL TESTS WERE FOOLING!!!

Originally I thought this was an adequate test
 40       expect(subject.cells.count) == 9

AND IT PASSED!!!! BUT THEN I ADDED THE puts LINE AND SAW THAT cells.count = 0
THEN I TRIED
 40       expect((subject.cells.count) == 9).to be_truthy
WHICH FAILED AND I REDUCED THE USELESS PARENTHESES...

NOW TO REWORK THE DIRECTIONAL SYNTAX OF THE TESTS... :P
























