1234567890---------2---------3---------4---------5---------6---------7-2-------8---------9---------1
SVENs GITHUB: https://github.com/ofcan/game-of-life-ruby
MY PLAYLIST:  https://www.youtube.com/playlist?list=PLMC91Ry9EhRKUn0MIdgXrZiptF7nVyYoQ
MY GITHUB:    https://github.com/mixelpixel/GameOfLife
**A Ruby Tutorial: Implementing John H. Conway's "Game of Life"**
PART 7 - Game Class
https://youtu.be/lqviK8M-noM?list=PLMC91Ry9EhRKUn0MIdgXrZiptF7nVyYoQ



# basic
  3 class Game
  4 end

Games class will tie together World class and Cell class. The idea is to be able to call
Game class so that it can invoke the game of life with a call to something like:
Game.new(world, cells) which will populate the gaming world with cells. So let's develop
the Game class and start by writing the test for it:
# spec
 53   context 'Game' do
 54     subject { Game.new }
 55   
 56     it 'should create a new Game object' do
 57       expect(subject.is_a?(Game)).to be_truthy
 58     end
 59   end


NOTE: The Rules tests will test the interactions of all three classes

The Game tests will just test the Game class. How to initialize the Game class?
Since we'll be passing world class and cell class to Game, it might make sense to use
world, cells as variable names, but to avoid confusion with cell(s), we'll call it "seeds"
# spec
 60     it 'should respond to proper methods' do
 61       expect(subject).to respond_to(:world)
 62       expect(subject).to respond_to(:seeds)
 63     end

We can test just this with the line # - rspec spec_game_of_life.rb:60.
It fails...

Now we will write the accessor method starting with :world:
# basic
  3 class Game
  4   attr_accessor :world
  5 end

now rspec spec_game_of_life.rb:60 passes "world" but fails on "seed, so...
# basic
  3 class Game
  4   attr_accessor :world, seeds
  5 end

...and rspec passes. So now let's write the rspec tests for the initialization of world & seeds.
# rspec
 65     it 'should initialize properly' do
 66       expect(subject.world).to be_a(World)
 67       expect(subject.seeds).to be_a(Array)
 68     end

...and it should fail. So then add the basic initialize:
# basic
  5   def initialize(world, seeds)
  6 #    @world     = world
  7 #    @seeds     = seeds
  8   end

...test and it should still fail. So let's pass in a "world" default value:
  5   def initialize(world=World.new, seeds)

...and test it. It fails again, so let's pass in a "seeds" default value:
  5   def initialize(world=World.new, seeds=[])

NOTE: I suppose we could do either seeds=[] or seeds=Array.new
And we test it again and it fails, so next up the instance variable for "@world"
so that it gets assigned the world=World.new object.
# basic
  5   def initialize(world=World.ne, seeds=[])
  6     @world     = world
  7 #    @seeds     = seeds
  8   end

...we test again and fail, so write the instance variable for "seeds"
# basic
  5   def initialize(world=World.new, seeds=[])
  6     @world     = world
  7     @seeds     = seeds
  8   end

...we test again AND PASS!!!!!!!


