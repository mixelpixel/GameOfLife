1234567890---------2---------3---------4---------5---------6---------7-2-------8---------9---------1
SVENs GITHUB: https://github.com/ofcan/game-of-life-ruby
MY PLAYLIST:  https://www.youtube.com/playlist?list=PLMC91Ry9EhRKUn0MIdgXrZiptF7nVyYoQ
MY GITHUB:    https://github.com/mixelpixel/GameOfLife
**A Ruby Tutorial: Implementing John H. Conway's "Game of Life"**
PART 12 - Four Rules finished!
https://youtu.be/vmSCB9IdDnk?list=PLMC91Ry9EhRKUn0MIdgXrZiptF7nVyYoQ


Completing the Four Rules:
RULE #2:

My thinking with this test (based on Rule #1 test) is that cell [0, 1] is alive and being tested for neighbors.
Not sure if when I start this [0, 1] is alive to start with...

# spec
146     context 'Rule 2: Any live cell with two or three live neighbours lives on to the next generation.' do
147       it 'should keep alive a cell with two or three neighbors' do
148 
149       # TWO neighbors
150         game = Game.new(world, [[0, 0], [0, 1], [0, 2]])
151         game.tick!
152         expect(world.cell_grid[0][1]).to be_alive
153 
154       # THREE neighbors
155         game = Game.new(world, [[0, 0], [0, 1], [0, 2], [1, 1]])
156         game.tick!
157         expect(world.cell_grid[0][1]).to be_alive
158 
159       end
160     end

# game
 15   def tick!
 16     world.cells.each do |cell|
 17       # Rule 1
 18       if cell.alive && world.live_neighbors_around_cell(cell).count < 2
 19         cell.die!
 20       end
 21       # Rule 2
 22       if cell.alive && ([2, 3].include? world.live_neighbors_around_cell(cell).count)
 23         cell.revive!                                              # < -- need to make this method
 24       end
 25     end
 26   end

# spec
 84   context 'Cell' do
 85     subject { Cell.new }
 86 
 87     it 'should create a new cell object' do
 88       expect(subject.is_a?(Cell)).to be_truthy
 89     end
 90 
 91     it 'should respond to proper methods' do
 92       expect(subject).to respond_to(:alive)
 93       expect(subject).to respond_to(:x)
 94       expect(subject).to respond_to(:y)
 95       expect(subject).to respond_to(:alive?)
 96       expect(subject).to respond_to(:die!)
 97       expect(subject).to respond_to(:revive!)      # <-- it's alive!!!!
 98    end

# game
113 class Cell
114   attr_accessor :alive, :x, :y
115 
116   def initialize(x=0, y=0)
117     @alive = false
118     @x = x
119     @y = y
120   end
121 
122   def alive?; alive; end
123 
124   def dead?; not alive; end
125 
126   def die!
127     @alive = false
128   end
129 
130   def revive!                           # < -- it's alive, ALIVE!!!!
131     @alive = true
132   end
133 
134 end



... after struggling with this awhile, i peeked at the lesson and realized there was more work to be 
done to get the first rule set up correctly so that it doesn't kill cells w/2 neighbors
(and kills cells with 0 neighbors)...

# rspec
137     context 'Rule 1: Any live cell with fewer than two live neighbours dies, as if caused by under-population.' do
138 
139       it 'should kill a live cell with NO live neighbors' do
140         game.world.cell_grid[1][1].alive = true
141         expect(world.cell_grid[1][1]).to be_alive
142         game.tick!
143         expect(game.world.cell_grid[1][1]).to be_dead
144       end
145 
146       it 'should kill a cell with ONE live neighbor' do
147         game = Game.new(world, [[1, 0], [2, 0]])
148         game.tick!
149         expect(world.cell_grid[1][0]).to be_dead
150         expect(world.cell_grid[2][0]).to be_dead
151       end
152 
153       it 'DOES NOT kill live cells with TWO live neighbors' do
154         game = Game.new(world, [[0, 1], [1, 1], [2, 1]])
155         game.tick!
156         expect(world.cell_grid[1][1]).to be_alive
157       end
158 
159     end

rspec spec_game_of_life.rb:153 FAILS cuz we are killing cells as we check them,
instead of checking all of them and noting which ones meet the state change
requirements by putting their cell into an array and THEN
killing the ones which meet the requirements.

# game
 15   def tick!
 16     next_round_live_cells = []
 17     next_round_dead_cells = []
 18     
 19     world.cells.each do |cell|
 20       # Rule 1
 21       if cell.alive && world.live_neighbors_around_cell(cell).count < 2
 22         next_round_dead_cells << cell
 23       end
 24       # Rule 2
 25       if cell.alive && ([2, 3].include? world.live_neighbors_around_cell(cell).count)
 26         next_round_live_cells << cell
 27       end
 28       # Rule 3
 29       if cell.alive? && world.live_neighbors_around_cell(cell).count > 3
 30         next_round_dead_cells << cell
 31       end
 32       # Rule 4
 33       if cell.dead? && world.live_neighbors_around_cell(cell).count == 3
 34         next_round_live_cells << cell
 35       end
 36     end
 37   
 38     next_round_live_cells.each do |cell|
 39       cell.revive!
 40     end
 41     next_round_dead_cells.each do |cell|
 42       cell.die!
 43     end
 44 
 45   end

# rspec
161     context 'Rule 2: Any live cell with two or three live neighbours lives on to the next generation.' do
162       it 'should keep alive a cell with TWO neighbors' do
163         game = Game.new(world, [[0, 0], [0, 1], [0, 2]])
164         expect(world.live_neighbors_around_cell(world.cell_grid[0][1]).count == 2).to be_truthy
165         game.tick!
166         expect(world.cell_grid[0][0]).to be_dead
167         expect(world.cell_grid[0][1]).to be_alive
168         expect(world.cell_grid[0][2]).to be_dead
169       end
170 
171       it 'should keep alive a cell with THREE neighbors' do
172         game = Game.new(world, [[0, 1], [1, 1], [2, 1], [2, 2]])
173         expect(world.live_neighbors_around_cell(world.cell_grid[1][1]).count == 3).to be_truthy
174         game.tick!
175         expect(world.cell_grid[0][1]).to be_dead
176         expect(world.cell_grid[1][1]).to be_alive
177         expect(world.cell_grid[2][1]).to be_alive
178         expect(world.cell_grid[2][2]).to be_alive
179       end
180     end

182     context 'Rule 3: Any live cell with more than three live neighbours dies, as if by over-population.' do
183       it 'should kill a cell with four or more neighbors' do
184         game = Game.new(world, [[0, 1], [1, 1], [2, 1], [2, 2], [1, 2]])
185         expect(world.live_neighbors_around_cell(world.cell_grid[1][1]).count == 4).to be_truthy
186         game.tick!
187         expect(world.cell_grid[0][1]).to be_alive
188         expect(world.cell_grid[1][1]).to be_dead
189         expect(world.cell_grid[2][1]).to be_alive
190         expect(world.cell_grid[2][2]).to be_alive
191         expect(world.cell_grid[1][2]).to be_dead
192       end
193     end
194 
195     context 'Rule 4: Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.' do
196       it 'should make come to life a dead cell with ONLY three live neighbors' do
197         game = Game.new(world, [[0, 1], [1, 1], [2, 1]])
198         expect(world.live_neighbors_around_cell(world.cell_grid[1][0]).count == 3).to be_truthy
199         game.tick!
200         expect(world.cell_grid[1][0]).to be_truthy
201         expect(world.cell_grid[1][2]).to be_truthy
202       end
203     end





