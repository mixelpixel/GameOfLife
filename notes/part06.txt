1234567890---------2---------3---------4---------5---------6---------7-2-------8---------9---------1
SVENs GITHUB: https://github.com/ofcan/game-of-life-ruby
MY PLAYLIST:  https://www.youtube.com/playlist?list=PLMC91Ry9EhRKUn0MIdgXrZiptF7nVyYoQ
MY GITHUB:    https://github.com/mixelpixel/GameOfLife
**A Ruby Tutorial: Implementing John H. Conway's "Game of Life"**
PART 6 - Game Class introduction
https://youtu.be/oHhKFwAcjb8?list=PLMC91Ry9EhRKUn0MIdgXrZiptF7nVyYoQ



initialize the Cell with x and y coordinates:
# basic
 26   def initialize(x, y)
 27     @alive = false
 28   end

rspec fails... in particular World.new fails because the Cell.new is failing.
We need to initialize x and y with a default value:
# basic
 26   def initialize(x=0, y=0)
 27     @alive = false
 28   end

And we should test the Cell object for x and y their values...
Not getting the results I'd hope for
per: https://www.relishapp.com/rspec/rspec-expectations/v/3-5/docs/built-in-matchers/equality-matchers

Okay... rspec syntax changes notwithstanding, We STILL NEED TO DEFINE X & Y!!! #duh...
# basic
 26   def initialize(x=0, y=0)
 27     @alive = false
 28     @x = x                 <-- Test this one first without the next
 29     @y = y                 <-- Then uncomment this one and both should pass
 30   end

Note, the different error messages when running with the Y commented out...

So, back to the cell_grid in World and Cell.new: Cell.new should NOT initialize with the values for
X and Y as ZERO, but relative to the POSITION of rows and columns in the grid array
- the 'col' for x and the 'row' for y:
# basic
 14     @cell_grid = Array.new(rows) do |row|
 15                    Array.new(cols) do |col|
 16                      Cell.new(col, row)
 17                    end
 18                  end

...and we can test this by loading the game_of_life.rb script into the irb:
patrick@ubuntu:~/Ruby/GameOfLife$ irb
2.3.0 :001 > load 'game_of_life.rb'
 => true 
2.3.0 :002 > World.new
 => #<World:0x0000000227bee0 @rows=3, @cols=3, @cell_grid=[[#<Cell:0x0000000227be68 @alive=false, @x=0, @y=0>, #<Cell:0x0000000227be40 @alive=false, @x=1, @y=0>, #<Cell:0x0000000227be18 @alive=false, @x=2, @y=0>], [#<Cell:0x0000000227bdc8 @alive=false, @x=0, @y=1>, #<Cell:0x0000000227bda0 @alive=false, @x=1, @y=1>, #<Cell:0x0000000227bd78 @alive=false, @x=2, @y=1>], [#<Cell:0x0000000227bd28 @alive=false, @x=0, @y=2>, #<Cell:0x0000000227bd00 @alive=false, @x=1, @y=2>, #<Cell:0x0000000227bcd8 @alive=false, @x=2, @y=2>]]> 
Note that each cell is dead (alive = false) and
each cell has a distinct number for col(x)/row(y) according to its position in the array.

OT: How would I print out the array/grid? Hmmm....

Okay - on to the rules of the game. We'll need a new context for Rules, and let's get the first rule
from the wikipedia article:
# spec
 53   context 'Rules' do
 54     context 'Rule 1: Any live cell with fewer than two live neighbours dies, as if caused by under-population.' do
 55     end
 56   end

Let's think about how we're going to implement this rule...?
The rules kind of connect the class World and the class Cell and make them interact.
So, let's introduce a new class to control the World and Class interactions: "Game"
But first we'll introduce a Rule spec...
# spec
 53   context 'Rules' do
 54     context 'Rule 1: Any live cell with fewer than two live neighbours dies, as if caused by under-population.' do
 55       it 'should kill a cell with one live neighbor' do
 56       end
 57     end
 58   en

And start testing for the Game class:
# spec
 53   context 'Rules' do
 54   
 55   let!(:game) { Game.new }
 56     
 57     context 'Rule 1: Any live....

...now, running rspec should give an uninitialized constant error...

NOTE: I am not familiar with the use of let or let!
This article is about an older version of rspec, but it might help:
https://www.relishapp.com/rspec/rspec-core/v/2-5/docs/helper-methods/let-and-let
http://stackoverflow.com/questions/17407733/trouble-differentiating-rspecs-let-vs-let

Anywhoo - testing "let" instead of "let!" the rspec passes, which is not what we want. If I understand
correctly, let! is forcing a creation of the object, and so far it isn't there, so let's create it:
  1 # basic file
  2 
  3 class Game
  4 end

...and with that and "let!" rspec passes! 

more fun in the next video!



















