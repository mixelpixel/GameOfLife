1234567890---------2---------3---------4---------5---------6---------7-2-------8---------9---------1
SVENs GITHUB: https://github.com/ofcan/game-of-life-ruby
MY PLAYLIST:  https://www.youtube.com/playlist?list=PLMC91Ry9EhRKUn0MIdgXrZiptF7nVyYoQ
MY GITHUB:    https://github.com/mixelpixel/GameOfLife
**A Ruby Tutorial: Implementing John H. Conway's "Game of Life"**
PART 9 - Counting the neighbours (beginning)
https://youtu.be/suBxLxipR-4?list=PLMC91Ry9EhRKUn0MIdgXrZiptF7nVyYoQ



We can now make a gaming world populated with cells that are either alive or dead.

To do that we need to make the cells interact by following the 4 rules of Conways Game of Life.

RULE #1:
# spec
 85   context 'Rules' do
 86 
 87   let!(:game) { Game.new }
 88 
 89     context 'Rule 1: Any live cell with fewer than two live neighbours dies, as if caused by under-population.' do
 90       it 'should kill a cell with one live neighbor' do

So we'll need to pass in neighboring cells to a new Game object:

 90       it 'should kill a cell with one live neighbor' do
 91         game = Game.new(world, [[1, 0], [2, 0]])
 92         game.tick!
 93       end

NOTE: when the Game state "tick"s over, both cells should be dead.

To be clear, we're creating a Game where these two cell are alive:
[[Cell.new, Cell.new, Cell.new], # [[[0][0], [0][1], [0][2]],
 [ ALIVE  , Cell.new, Cell.new]  #  [[1][0], [1][1], [1][2]],
 [ ALIVE  , Cell.new, Cell.new]] #  [[2][0], [2][1], [2][2]]]






























