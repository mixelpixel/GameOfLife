1234567890---------2---------3---------4---------5---------6---------7-2-------8---------9---------1
SVENs GITHUB: https://github.com/ofcan/game-of-life-ruby
MY PLAYLIST:  https://www.youtube.com/playlist?list=PLMC91Ry9EhRKUn0MIdgXrZiptF7nVyYoQ
MY GITHUB:    https://github.com/mixelpixel/GameOfLife
**A Ruby Tutorial: Implementing John H. Conway's "Game of Life"**
PART 9 - Counting the neighbours (beginning)
https://youtu.be/suBxLxipR-4?list=PLMC91Ry9EhRKUn0MIdgXrZiptF7nVyYoQ



We can now make a gaming world populated with cells that are either alive or dead.

To do that we need to make the cells interact by following the 4 rules of Conways Game of Life.

RULE #1:
# spec
 85   context 'Rules' do
 86 
 87   let!(:game) { Game.new }
 88 
 89     context 'Rule 1: Any live cell with fewer than two live neighbours dies, as if caused by under-population.' do
 90       it 'should kill a cell with one live neighbor' do

So we'll need to pass in neighboring cells to a new Game object:

 90       it 'should kill a cell with one live neighbor' do
 91         game = Game.new(world, [[1, 0], [2, 0]])
 92         game.tick!
 93       end

NOTE: when the Game state "tick"s over, both cells should be dead.

To be clear, we're creating a Game where these two cell are alive:
[[Cell.new, Cell.new, Cell.new], # [[[0][0], [0][1], [0][2]],
 [ ALIVE  , Cell.new, Cell.new]  #  [[1][0], [1][1], [1][2]],
 [ ALIVE  , Cell.new, Cell.new]] #  [[2][0], [2][1], [2][2]]]

...testing at this point will fail with undefined method: game.tick!

Before we construct tick! to register the game state, tho, let's look at the
rule condition and meet that: How many neighbors does a living cell have?
We need to implement the counting of neighbors (because all of the rules
rely on counting neighbors). For now, it makes sense to put this neightbor
counting method in the World class. So, in the spec file within the context of 
'World' we can add this to the "should respond to proper method"
# spec
 18     it 'should respond to proper methods' do
 19       expect(subject).to respond_to(:rows)
 20       expect(subject).to respond_to(:cols)
 21       expect(subject).to respond_to(:cell_grid)
 22       expect(subject).to respond_to(:neighbor)
 23     end

and since game.tick! is still pending, we can just rspec line 22
rspec spec_game_of_life.rb:22
...and it fails on :neighbor (our World does not yet respond to neighbor)
So let's make the basic class:
# game
 18 class World
 19   attr_accessor :rows, :cols, :cell_grid
 20 
 21   def initialize(rows=3, cols=3)
      ...
 33   end
 34 
 35   def neighbors       # <--
 36   end                 # <--
 37 
 38 end

...and now the command "rspec spec_game_of_life.rb:22" passes

So, to get :neighbors functional, we'll need to return an array of each cells neighbors

So let's rename neighbor to neighbor_around_cell and pass in a value of the cell
we'd like to check:
# rspec
 22       expect(subject).to respond_to(:neighbors_around_cell)

We test the rspec, it fails and reports the method, so we write the method:
# game
 35   def neighbors_around_cell(cell)
 36   end

...and it passes, and that's all for now!


























