1234567890---------2---------3---------4---------5---------6---------7-2-------8---------9---------1
SVENs GITHUB: https://github.com/ofcan/game-of-life-ruby
MY PLAYLIST:  https://www.youtube.com/playlist?list=PLMC91Ry9EhRKUn0MIdgXrZiptF7nVyYoQ
MY GITHUB:    https://github.com/mixelpixel/GameOfLife
**A Ruby Tutorial: Implementing John H. Conway's "Game of Life"**
PART 5 - Cell Class Coordinates
https://youtu.be/uwqfb3-Xjo0?list=PLMC91Ry9EhRKUn0MIdgXrZiptF7nVyYoQ



RECAP: what's going on in cell_grid?
The first line creates an array based on the value passed through "rows"
Within each "row" array, the second line creates an array based on the value passed through "cols"
Within each "col" array, a new "Cell" object is created. I.e.:
With as many elements as there are "rows" the first line gives us
[nil, nil, nil] or we could write this as
[nil, 
 nil, 
 nil]
...and then with as many elements as there are "cols", each "row" becomes
[[nil, nil, nil],
 [nil, nil, nil]
 [nil, nil, nil]]
and starts looking more like a two dimensional grid
which then gets populated with with new Cell objects:
[[Cell.new, Cell.new, Cell.new],
 [Cell.new, Cell.new, Cell.new]
 [Cell.new, Cell.new, Cell.new]]

VIM NOTE: To replace each "nil" with "Cell.new", v for Visual Mode, select the range of "nil"s
to be replaced, then enter :, :'<,'>' pops up, and then enter "s/nil/Cell.new/g" so that the
command line looks like :'<,'>'s/nil/Cell.new/g


Now, each Cell object is either alive or dead (on or off, true or false...)
And we'll need a method (:alive) to define that binary state.


OOOOOOF-AH PLEASE NOTE: The responds_to? syntax was doing me a disservice
per https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers/respond-to-matcher

I have changed the tests for the methods :rows, :cols, :cell_grid and now :alive from
expect(subject.responds_to?(:method))
to
expect(subject).to respond_to(:method)

NOTE the lack of a question mark, the .to and general difference there. Now, the test works relative
to the attr_accessor declaration.
Now all the responds_to calls in rspec look like so:
# spec
 14     it 'should respond to proper methods' do
 15       expect(subject).to respond_to(:rows)
 16       expect(subject).to respond_to(:cols)
 17       expect(subject).to respond_to(:cell_grid)
 18     end
...
 40     it 'should respond to proper methods' do
 41       expect(subject).to respond_to(:alive)

And the rspec passes or fails according to line 24:
# basic
 23 class Cell
 24   attr_accessor :alive
 25 end
(feel free to change the "alive" name, or comment our line 24 to verify)

NOTE:
I'm suspecting that my rspec calls using "is_a?" should all be refactored...
# spec
 11     it 'should create a new world object' do
 12       expect(subject.is_a?(World)).to be_truthy
 13     end
...
 20     it 'should create proper cell_grid upon initialization' do
 21       expect(subject.cell_grid.is_a?(Array)).to be_truthy
...
 36     it 'should create a new cell object' do
 37       expect(subject.is_a?(Cell)).to be_truthy
 38     end


...Okay, back to Cell.new
Let's initialize the Cell objects to a default state of "dead".
Comment it out, write the test, check the test (fail), uncomment it and test pass.
# basic
 26   def initialize
 27 #    @alive == false
 28   end

# spec
 44     it'should initialize properly' do
 45       expect(subject.alive).to be_falsey
 46     end

per: https://www.relishapp.com/rspec/rspec-expectations/v/3-5/docs/built-in-matchers/be-matchers

  expect(obj).to be_truthy  # passes if obj is truthy (not nil or false)
  expect(obj).to be_falsey  # passes if obj is falsy (nil or false)
  expect(obj).to be_nil     # passes if obj is nil
  expect(obj).to be         # passes if obj is truthy (not nil or false)

I'm pretty sure (obj) in our case is (subject.alive)
Maybe instead of subject, I should just use Cell.alive? That resulted in:
patrick@ubuntu:~/Ruby/GameOfLife$ rspec spec_game_of_life.rb
.....F

Failures:

  1) Game of Life cell should initialize properly
     Failure/Error: expect(Cell.alive).to be_falsey

     NoMethodError:
       undefined method `alive' for Cell:Class
     # ./spec_game_of_life.rb:45:in `block (3 levels) in <top (required)>'

Finished in 0.00629 seconds (files took 0.12548 seconds to load)
6 examples, 1 failure

Failed examples:

rspec ./spec_game_of_life.rb:44 # Game of Life cell should initialize properly



Note: around @4m39s Sven tests the @alive default for true or false. I think he is getting at why
the changes have been made to "truthy" and "falsey" and I am also gonna test @ alive == "nil"
Hmmm... @alive == true passes.
        @alive == nil passes... Hmm.
Not sure what is going on here, of note, rspec does fail when I comment out the "attr_accessor :alive" line
Check in irb:
Oh wait!!!!!!!!!!!!!!!1
I wrote @alive == false (a comparison, not the binding/assignment)!!!!!
Now:
patrick@ubuntu:~/Ruby/GameOfLife$ irb
2.3.0 :001 > load 'game_of_life.rb'
 => true 
2.3.0 :002 > World.new
 => #<World:0x0000000086c6f8 @rows=3, @cols=3, @cell_grid=[[#<Cell:0x0000000086c680 @alive=false>, #<Cell:0x0000000086c658 @alive=false>, #<Cell:0x0000000086c630 @alive=false>], [#<Cell:0x0000000086c568 @alive=false>, #<Cell:0x0000000086c540 @alive=false>, #<Cell:0x0000000086c518 @alive=false>], [#<Cell:0x0000000086c4a0 @alive=false>, #<Cell:0x0000000086c478 @alive=false>, #<Cell:0x0000000086c450 @alive=false>]]> 
2.3.0 :003 > quit

And... this check:

 26   def initialize
 27     @alive = true
 28   end

FAILS! (like it should) Note that both @alive = false AND @alive = nil PASS rspec.
Does this pass?
# spec 
 44     it'should initialize properly' do
 45       expect(subject.alive).to be false
 46     end
NOTE: this passes but neither true nor nil pass, BUT, be_falsey gives a better error msg. So back to:
# spec
 44     it'should initialize properly' do
 45       expect(subject.alive).to be_falsey
 46     end

ON WITH THE SHOW @6m04s:
Since a cell is withing the context of a cell grid,
it would be great to get the Cell coordinates - e.g. (x, y) - when the Cell objects are created.

# spec
 40     it 'should respond to proper methods' do
 41       expect(subject).to respond_to(:alive)
 42       expect(subject).to respond_to(:x)
 43       expect(subject).to respond_to(:y)
 44     end

Test fails (no :x)

# basic
 24   attr_accessor :alive, :x, :y

Test passes!


Next video to cover :x and :y in the cell instance variable :)







