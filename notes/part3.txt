1234567890---------2---------3---------4---------5---------6---------7-2-------8---------9---------1
SVENs GITHUB: https://github.com/ofcan/game-of-life-ruby
MY PLAYLIST:  https://www.youtube.com/playlist?list=PLMC91Ry9EhRKUn0MIdgXrZiptF7nVyYoQ
MY GITHUB:    https://github.com/mixelpixel/GameOfLife
**A Ruby Tutorial: Implementing John H. Conway's "Game of Life"**
PART 3 - World class
https://youtu.be/7kHmkskv8ug?list=PLMC91Ry9EhRKUn0MIdgXrZiptF7nVyYoQ


Implementing the classes to make the game.

Consider the grid of cells... 2 concepts
1) GRID
2) CELL

Modify the "spec_game_of_life.rb" file:
  1 # spec file
  2 
  3 require 'rspec'
  4 
  5 describe 'Game of Life' do
  6   context 'world' do
  7     subject { World.new }
  8     it 'should create a new world object' do
  9       subject.is_a?(World).should be_true    # <- this may need to be refactored
 10     end
 11   end
 12 end

...set the context of a world, the subject is a new World object which should create a new world object and it is true that subject is a member of World class...

NOTE: if we run the following command:
patrick@ubuntu:~/Ruby/GameOfLife$ rspec spec_game_of_life.rb
Thanks to TDD, we get a failure notice because we have not created the class in the game_of_life.rb script.


So, let's initialize that World constant in the "game_of_life.rb" file:
  1 # basic file
  2 
  3 class World
  4 end

If we run the rspec command on the spec file, again we get a failure BECAUSE the spec file does not know it needs to reference the game_of_life.rb file.


So, let's modify the rspec file:
  1 # spec file
  2 
  3 require 'rspec'
  4 require_relative 'game_of_life.rb'
  5 
  6 describe 'Game of Life' do
  7   context 'world' do
  8     subject { World.new }
  9     it 'should create a new world object' do
 10       subject.is_a?(World).should be_true     # <- this may need to be refactored
 11     end
 12   end
 13 end


NOTE: rspec syntax has changed and this code produces an error.
Instead of "instance.should be_true"
now        "expect(instance).to be_true
per: http://rspec.info/blog/2012/06/rspecs-new-expectation-syntax/
If I am readin this correctly, the new style should read:
"expect(subject.is_a?(World)).to be_true"

Trying:  failure... Ah... per the error message: instead of be_true, "be true" - So:
  1 # spec file
  2 
  3 require 'rspec'
  4 require_relative 'game_of_life.rb'
  5 
  6 describe 'Game of Life' do
  7   context 'world' do
  8     subject { World.new }
  9     it 'should create a new world object' do
 10       expect(subject.is_a?(World)).to be true     # <- even w/"expect" thisis_a? may need to be refactored
 11     end
 12   end
 13 end
 

CONSIDER the World object we are making: The World object defines a GRID that consists of COLUMNS and ROWS.
So, initialize the World class with the arguments specifying the number of rows and cells:
NOTE: using the updated "expect" syntax
Instead of "instance.should be_true"
subject.should respond_to(:rows)
subject.should respond_to(:cols)
now        "expect(instance).to be_true

14     it 'should respond to proper methods' do
15       expect(respond_to(:rows))
16       expect(respond_to(:cols))

...running rspec now results in two "examples" (instead of one like the last time - it think this
refers to the "it" arguments) and no errors... but unlike the video, not an error.
Hmm? This should report a failure since right now World class is not responding to :rows or :columns.


14     it 'should respond to proper methods' do
15       expect(subject) respond_to(:rows))
16       expect(subject) respond_to(:cols))

...Nope

NOTE: respond_to vs respond_to?
http://stackoverflow.com/questions/6849722/confused-about-respond-to-vs-respond-to
This:
15       expect(subject.respond_to(:rows))
So:
  1 # spec file
  2 
  3 require 'rspec'
  4 require_relative 'game_of_life.rb'
  5 
  6 describe 'Game of Life' do
  7 
  8   context 'world' do
  9     subject { World.new }
 10 
 11     it 'should create a new world object' do
 12       expect(subject.is_a?(World)).to be true
 13     end
 14     it 'should respond to proper methods' do
 15       expect(subject.respond_to?(:rows))      # < - See part5.txt
 16       expect(subject.respond_to?(:cols))
 17     end
 18 
 19   end
 20 
 21 end


AND NOW, to add the methods to the Class so they'll be accessible to rspec

  1 # basic file
  2 
  3 class World
  4   attr_accessor :rows, :cols        # These methods are now accessible to rspec
  5   def initialize(rows=3, cols=3)    # default argument "=values"
  6     @rows      = rows
  7     @cols      = cols
  8   end                               # These methods are now initialized
  9 
 10 end


NOTE: the World args rows/cols are just numbers and do not yet define the GRID.
They way we define a grid is an array within an array, e.g.
2.3.0 :001 > Array.new(3)
 => [nil, nil, nil] 
2.3.0 :002 > Array.new(5) do |x|
2.3.0 :003 >     Array.new(3)
2.3.0 :004?>   end
 => [[nil, nil, nil], [nil, nil, nil], [nil, nil, nil], [nil, nil, nil], [nil, nil, nil]]

It's arbitrary whether or not Array.new(5) will be rows or columns and Array.new(3) columns or rows respectively,
BUT we choose one way and stick with it as a convention.

end part3


